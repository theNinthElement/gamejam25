//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/RikschaControll.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RikschaControll: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RikschaControll()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RikschaControll"",
    ""maps"": [
        {
            ""name"": ""Menu"",
            ""id"": ""febddbaf-3fc4-44da-8a5e-ed2cb26f5042"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""InGame"",
            ""id"": ""335fb0d3-a7f0-40b6-ba12-e6f7c35619d8"",
            ""actions"": [
                {
                    ""name"": ""RikschaMoveHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""97b04dd5-4729-4e6c-9b6f-0408e51e483b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BowlRotationX"",
                    ""type"": ""Value"",
                    ""id"": ""f43c41a7-d4b4-4333-9710-5dcfc8c258b2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurboRotation"",
                    ""type"": ""Button"",
                    ""id"": ""b6c69b24-bb2e-48aa-9922-71396aa4e522"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""829940ba-d9bb-4026-a26c-1d96c077a8f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7ec36c16-5317-441d-9dde-4bfa3577dfdb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RikschaMoveHorizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""dacdce31-d930-42f3-b1e7-f3f2dc5af9d9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RikschaMoveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b38d3767-8e2d-4295-a4b1-ac81fb2be737"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RikschaMoveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bdfd44fb-1924-4702-9b36-88a50e49fe80"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RikschaMoveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1844fd78-4cf1-4b90-a632-f0ba1020d24c"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BowlRotationX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7795514-8c9d-4152-8000-b0e38425728c"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=10)"",
                    ""groups"": """",
                    ""action"": ""BowlRotationX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42ee15db-3d9a-4f73-b6cc-198b7a529693"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurboRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ae3fcdc-71aa-4ba8-b96a-db8d6d452b2b"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurboRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19cbfdef-cd6c-4fd1-a3fa-c28a0decae7f"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurboRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9707128e-b725-448c-83bc-d0dc5b04e7e2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        // InGame
        m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
        m_InGame_RikschaMoveHorizontal = m_InGame.FindAction("RikschaMoveHorizontal", throwIfNotFound: true);
        m_InGame_BowlRotationX = m_InGame.FindAction("BowlRotationX", throwIfNotFound: true);
        m_InGame_TurboRotation = m_InGame.FindAction("TurboRotation", throwIfNotFound: true);
        m_InGame_PauseGame = m_InGame.FindAction("PauseGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    public struct MenuActions
    {
        private @RikschaControll m_Wrapper;
        public MenuActions(@RikschaControll wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // InGame
    private readonly InputActionMap m_InGame;
    private List<IInGameActions> m_InGameActionsCallbackInterfaces = new List<IInGameActions>();
    private readonly InputAction m_InGame_RikschaMoveHorizontal;
    private readonly InputAction m_InGame_BowlRotationX;
    private readonly InputAction m_InGame_TurboRotation;
    private readonly InputAction m_InGame_PauseGame;
    public struct InGameActions
    {
        private @RikschaControll m_Wrapper;
        public InGameActions(@RikschaControll wrapper) { m_Wrapper = wrapper; }
        public InputAction @RikschaMoveHorizontal => m_Wrapper.m_InGame_RikschaMoveHorizontal;
        public InputAction @BowlRotationX => m_Wrapper.m_InGame_BowlRotationX;
        public InputAction @TurboRotation => m_Wrapper.m_InGame_TurboRotation;
        public InputAction @PauseGame => m_Wrapper.m_InGame_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_InGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
        public void AddCallbacks(IInGameActions instance)
        {
            if (instance == null || m_Wrapper.m_InGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InGameActionsCallbackInterfaces.Add(instance);
            @RikschaMoveHorizontal.started += instance.OnRikschaMoveHorizontal;
            @RikschaMoveHorizontal.performed += instance.OnRikschaMoveHorizontal;
            @RikschaMoveHorizontal.canceled += instance.OnRikschaMoveHorizontal;
            @BowlRotationX.started += instance.OnBowlRotationX;
            @BowlRotationX.performed += instance.OnBowlRotationX;
            @BowlRotationX.canceled += instance.OnBowlRotationX;
            @TurboRotation.started += instance.OnTurboRotation;
            @TurboRotation.performed += instance.OnTurboRotation;
            @TurboRotation.canceled += instance.OnTurboRotation;
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
        }

        private void UnregisterCallbacks(IInGameActions instance)
        {
            @RikschaMoveHorizontal.started -= instance.OnRikschaMoveHorizontal;
            @RikschaMoveHorizontal.performed -= instance.OnRikschaMoveHorizontal;
            @RikschaMoveHorizontal.canceled -= instance.OnRikschaMoveHorizontal;
            @BowlRotationX.started -= instance.OnBowlRotationX;
            @BowlRotationX.performed -= instance.OnBowlRotationX;
            @BowlRotationX.canceled -= instance.OnBowlRotationX;
            @TurboRotation.started -= instance.OnTurboRotation;
            @TurboRotation.performed -= instance.OnTurboRotation;
            @TurboRotation.canceled -= instance.OnTurboRotation;
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
        }

        public void RemoveCallbacks(IInGameActions instance)
        {
            if (m_Wrapper.m_InGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInGameActions instance)
        {
            foreach (var item in m_Wrapper.m_InGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InGameActions @InGame => new InGameActions(this);
    public interface IMenuActions
    {
    }
    public interface IInGameActions
    {
        void OnRikschaMoveHorizontal(InputAction.CallbackContext context);
        void OnBowlRotationX(InputAction.CallbackContext context);
        void OnTurboRotation(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
}
